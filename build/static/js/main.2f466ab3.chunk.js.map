{"version":3,"sources":["helper/serviceWorker.js","components/SuggestionBox.jsx","helper/SuggestionListProvider.js","components/MyEditor.jsx","components/InformationHeader.jsx","index.js"],"names":["Boolean","window","location","hostname","match","SuggestionBox","this","props","suggestions","length","className","word","map","index","key","selected","Component","SuggestionListProvider","string","cleanString","replace","re","RegExp","dict","filter","test","MyEditor","state","editorState","EditorState","createEmpty","lastWord","suggestionSelected","onChange","bind","handleKeyCommand","myKeyBindingFn","setLastWord","setLastWordAndSuggestions","setState","command","console","log","currentState","getCurrentContent","selection","getSelection","ao","getFocusOffset","removeSelection","merge","anchorOffset","ncs","Modifier","replaceText","es","push","newSelect","newState","RichUtils","e","keyCode","getDefaultKeyBinding","getAnchorKey","getFocusKey","getAnchorOffset","textArray","getBlockForKey","getText","slice","split","provideSuggestion","keyBindingFn","placeholder","React","InformationHeader","type","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f466ab3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React, { Component } from 'react';\nimport './SuggestionBox.css';\n\nclass SuggestionBox extends Component {\n    render() {\n        if (this.props.suggestions.length === 0) return null;\n        return ( \n            <div className='suggestionBox'>\n                {this.props.word}\n                <ul>\n                    {this.props.suggestions.map((word, index) => \n                        <li key={word} className={index === this.props.selected ? 'highlight' : null} >{word}</li>)}\n                </ul>\n            </div>\n         );\n    }\n}\n\nexport default SuggestionBox;","class SuggestionListProvider {\n    static dict = [\n        'apple',\n        'ball',\n        'cat',\n        'dog',\n        'elephant',\n        'fish',\n        'goat',\n        'hello',\n        'icecream',\n        'jungle',\n        'lion',\n        'mouse',\n        'north',\n    ]\n\n    static provideSuggestion(string) {\n        let suggestions = [];\n        const cleanString = string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n        if (cleanString.length > 0){\n            const re = new RegExp(cleanString, 'i');\n            suggestions = this.dict.filter(word => re.test(word));\n        }\n        return suggestions;\n    }\n}\n\nexport default SuggestionListProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Editor, EditorState, RichUtils, getDefaultKeyBinding, Modifier} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport SuggestionBox from './SuggestionBox';\nimport SuggestionListProvider from '../helper/SuggestionListProvider';\n\nclass MyEditor extends React.Component {\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n      editorState: EditorState.createEmpty(),\n      lastWord: 'suggestions',\n      suggestions: [],\n      suggestionSelected: 0\n    };\n  \tthis.onChange = this.onChange.bind(this);\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.myKeyBindingFn = this.myKeyBindingFn.bind(this);\n    this.setLastWord = this.setLastWordAndSuggestions.bind(this);\n  }\n\n  onChange(editorState) {\n    this.setState({ editorState }, this.setLastWordAndSuggestions); // setState is async\n  }\n\n  handleKeyCommand(command, editorState) {\n    console.log(command);\n    if (command === 'suggest-write') {\n      const currentState = this.state.editorState.getCurrentContent();\n      const selection = this.state.editorState.getSelection();\n      const ao = selection.getFocusOffset() - this.state.lastWord.length;\n      const removeSelection = selection.merge({\n        anchorOffset : ao\n      });\n\t\t\tconst ncs = Modifier.replaceText(currentState, removeSelection, this.state.suggestions[this.state.suggestionSelected]);\n\t\t\tconst es = EditorState.push(this.state.editorState, ncs, 'insert-fragment');\n\t\t\tthis.onChange(es);\n\t\t\treturn 'handled';\n    }\n    if (command === 'suggest-up') {\n      let newSelect = this.state.suggestionSelected;\n      newSelect = (newSelect - 1 + this.state.suggestions.length) % this.state.suggestions.length;\n      this.setState({ suggestionSelected : newSelect});\n      return 'handled';\n    }\n    if (command === 'suggest-down') {\n      let newSelect = this.state.suggestionSelected;\n      newSelect = (newSelect + 1) % this.state.suggestions.length;\n      this.setState({ suggestionSelected : newSelect});\n      return 'handled';\n    }\n\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n\t\t\tthis.onChange(newState);\n\t\t\treturn 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  myKeyBindingFn(e) {\n    console.log(e.keyCode);\n    if (e.keyCode === 9 /* TAB key */ && this.state.suggestions.length > this.state.suggestionSelected) {\n      return 'suggest-write';\n    }\n    if (e.keyCode === 38 && this.state.suggestions.length > 1) {\n      return 'suggest-up';\n    }\n    if (e.keyCode === 40 && this.state.suggestions.length > 1) {\n      return 'suggest-down';\n    }\n    return getDefaultKeyBinding(e);\n  }\n  \n\n  setLastWordAndSuggestions() {\n    let lastWord = '';\n\n    const selection = this.state.editorState.getSelection();\n    if (selection.getAnchorKey() === selection.getFocusKey() &&\n        selection.getAnchorOffset() === selection.getFocusOffset()) {\n      \n      const content = this.state.editorState.getCurrentContent();\n      const block = content.getBlockForKey(selection.getAnchorKey());\n      const textArray = block.getText().slice(0, selection.getAnchorOffset()).split(/(\\s+)/);\n      \n      if (textArray.length > 0) {\n        lastWord = textArray[textArray.length - 1];\n      }\n    }\n    \n    if (lastWord !== this.state.lastWord) {\n      this.setState({ \n        lastWord,\n        suggestions: SuggestionListProvider.provideSuggestion(lastWord),\n        suggestionSelected : 0\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Editor \n          editorState={this.state.editorState}\n          onChange={this.onChange}\n          handleKeyCommand={this.handleKeyCommand}\n          keyBindingFn={this.myKeyBindingFn}\n          placeholder=\"Type here\"\n        />\n        <SuggestionBox \n          word = {this.state.lastWord}\n          suggestions = {this.state.suggestions}\n          selected = {this.state.suggestionSelected}\n        />\n      </div>      \n    );\n  }\n}\n\nexport default MyEditor;","import React, { Component } from 'react';\nimport './InformationHeader.css';\n\nclass InformationHeader extends Component {\n    render() { \n        return (\n            <div className='headerContainer'>\n                <span className='inputContainer'>\n                    Name: &nbsp; &nbsp;\n                    <input type='text' className='inputArea'></input>\n                </span>\n                <br/>\n                \n                Age: &nbsp; &nbsp;\n                <input type='text' className='inputArea'></input>\n                &nbsp; &nbsp; &nbsp; &nbsp;\n                Sex: &nbsp; &nbsp;\n                <input type='text' className='inputArea'></input> <br/>\n                Address: &nbsp; &nbsp;\n                <input type='text' className='inputArea'></input>\n\n            </div>\n        );\n    }\n}\n \nexport default InformationHeader;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'draft-js/dist/Draft.css';\nimport * as serviceWorker from './helper/serviceWorker';\nimport MyEditor from './components/MyEditor'\nimport InformationHeader from './components/InformationHeader';\nimport './index.css';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className='page'>\n        <InformationHeader />\n        <div className='columnContainer'>\n          <div className='column'>\n            <MyEditor />\n          </div>\n          <div className='column'>\n            <MyEditor />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}