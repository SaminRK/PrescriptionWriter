{"version":3,"sources":["helper/serviceWorker.js","helper/SuggestionListProvider.js","components/SuggestionBox.jsx","index.js"],"names":["Boolean","window","location","hostname","match","SuggestionListProvider","word","re","RegExp","suggestions","length","this","dict","filter","test","SuggestionBox","props","map","key","Component","MyEditor","state","editorState","EditorState","createEmpty","lastWord","suggestionSelected","onChange","bind","handleKeyCommand","myKeyBindingFn","setLastWord","setLastWordAndSuggestions","setState","command","currentState","getCurrentContent","selection","getSelection","ao","getFocusOffset","removeSelection","merge","anchorOffset","ncs","Modifier","replaceText","es","push","newState","RichUtils","e","keyCode","shiftKey","getDefaultKeyBinding","console","log","lastBlock","getLastBlock","lastBlockTextArray","getText","split","provideSuggestion","keyBindingFn","placeholder","React","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b39b5149.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","class SuggestionListProvider {\n    static dict = [\n        'apple',\n        'ball',\n        'cat',\n        'dog',\n        'elephant',\n        'fish',\n        'goat',\n        'hello',\n        'icecream',\n        'jungle',\n        'lion',\n        'mouse',\n        'north',\n    ]\n\n    static provideSuggestion(word) {\n        const re = new RegExp(word, 'i');\n        let suggestions = [];\n        if (word.length > 0)\n            suggestions = this.dict.filter(word => re.test(word));\n        return suggestions;\n    }\n}\n\nexport default SuggestionListProvider;","import React, { Component } from 'react';\nimport SuggestionListProvider from '../helper/SuggestionListProvider';\n\nclass SuggestionBox extends Component {\n    render() {\n        return ( \n            <div>\n                <hr></hr>\n                {this.props.word}\n                <hr></hr>\n                <ul>\n                    {this.props.suggestions.map(word => <li key={word}>{word}</li>)}\n                </ul>\n                <hr></hr>\n            </div>\n         );\n    }\n}\n \nexport default SuggestionBox;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Editor, EditorState, RichUtils, getDefaultKeyBinding, Modifier} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport * as serviceWorker from './helper/serviceWorker';\nimport SuggestionBox from './components/SuggestionBox';\nimport SuggestionListProvider from './helper/SuggestionListProvider';\n\nclass MyEditor extends React.Component {\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n      editorState: EditorState.createEmpty(),\n      lastWord: 'suggestions',\n      suggestions: [],\n      suggestionSelected: 0\n    };\n  \tthis.onChange = this.onChange.bind(this);\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.myKeyBindingFn = this.myKeyBindingFn.bind(this);\n    this.setLastWord = this.setLastWordAndSuggestions.bind(this);\n  }\n\n  onChange(editorState) {\n    this.setState({ editorState }, this.setLastWordAndSuggestions); // setState is async\n  }\n\n  handleKeyCommand(command, editorState) {\n    if (command === 'myeditor-write-suggest' && \n      this.state.suggestions.length > this.state.suggestionSelected) {\n      const currentState = this.state.editorState.getCurrentContent();\n      const selection = this.state.editorState.getSelection();\n      const ao = selection.getFocusOffset() - this.state.lastWord.length;\n      const removeSelection = selection.merge({\n        anchorOffset : ao\n      });\n\t\t\tconst ncs = Modifier.replaceText(currentState, removeSelection, this.state.suggestions[this.state.suggestionSelected]);\n\t\t\tconst es = EditorState.push(this.state.editorState, ncs, 'insert-fragment');\n\t\t\tthis.onChange(es);\n\t\t\treturn 'handled';\n\t\t}\n\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n\t\t\tthis.onChange(newState);\n\t\t\treturn 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  myKeyBindingFn(e) {\n    if (e.keyCode === 9 /* TAB key */ && e.shiftKey) {\n      return 'myeditor-write-suggest';\n    }\n    return getDefaultKeyBinding(e);\n  }\n  \n\n  setLastWordAndSuggestions() {\n    console.log(\"called\");\n    const currentState = this.state.editorState.getCurrentContent();\n    console.log(currentState);\n    const lastBlock = currentState.getLastBlock();\n    console.log(lastBlock);\n    const lastBlockTextArray = lastBlock\n                                  .getText()\n                                  .split(/(\\s+)/);\n    console.log(lastBlockTextArray);\n    let lastWord = '';\n    if (lastBlockTextArray.length > 0) {\n      lastWord = lastBlockTextArray[lastBlockTextArray.length - 1];\n    }\n    if (lastWord !== this.state.lastWord) {\n      this.setState({ lastWord, suggestions: SuggestionListProvider.provideSuggestion(lastWord)});\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Editor \n          editorState={this.state.editorState}\n          onChange={this.onChange}\n          handleKeyCommand={this.handleKeyCommand}\n          keyBindingFn={this.myKeyBindingFn}\n          placeholder=\"Type here\"\n        />\n        <SuggestionBox \n          word = {this.state.lastWord}\n          suggestions = {this.state.suggestions}\n        />\n      </div>      \n    );\n  }\n}\n\nReactDOM.render(<MyEditor />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}